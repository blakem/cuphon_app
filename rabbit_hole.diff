diff --git a/app/controllers/pages_controller.rb b/app/controllers/pages_controller.rb
index 77bcafe..877ac5c 100644
--- a/app/controllers/pages_controller.rb
+++ b/app/controllers/pages_controller.rb
@@ -32,6 +32,12 @@ class PagesController < ApplicationController
         else
           subscriber.subscribe!(brand)
           OutboundMessages.subscribed_message(brand)
+          # brand_obj = Brand.find_by_title(brand)
+          # if !brand.nil? and brand_obj.has_active_instant?
+          #   brand_obj.send_active_message
+          # else
+          #   OutboundMessages.subscribed_message(brand)
+          # end
         end
 
       when 'END'
diff --git a/app/models/brand.rb b/app/models/brand.rb
index 9ea9434..d382127 100644
--- a/app/models/brand.rb
+++ b/app/models/brand.rb
@@ -15,6 +15,7 @@
 
 class Brand < ActiveRecord::Base
   belongs_to :merchant
+  
   def self.get_by_obj_or_string(brand)
     if !brand.respond_to?(:id)
       brand_str = brand
@@ -22,4 +23,17 @@ class Brand < ActiveRecord::Base
     end
     brand
   end
+  
+  def brands_instants
+    # has_many :brands_instant   # ???
+    BrandsInstants.where(:brand_id => self.id)
+  end
+  
+  def send_active_message
+    self.brands_instants.first
+  end
+  
+  def has_active_instant?
+    self.brands_instants
+  end
 end
diff --git a/app/models/brands_instant.rb b/app/models/brands_instant.rb
index 3fb7c77..20b3d26 100644
--- a/app/models/brands_instant.rb
+++ b/app/models/brands_instant.rb
@@ -16,4 +16,6 @@
 
 class BrandsInstant < ActiveRecord::Base
   def self.table_name() "brands_instant" end
+    
+  belongs_to :brand
 end
diff --git a/spec/controllers/pages_controller_spec.rb b/spec/controllers/pages_controller_spec.rb
index 7adc539..63c9d88 100644
--- a/spec/controllers/pages_controller_spec.rb
+++ b/spec/controllers/pages_controller_spec.rb
@@ -285,11 +285,10 @@ describe PagesController do
     
     # describe "instant coupon" do
     #   it "should send an instant coupon when one is found" do
-    #     brand = Factory(:brand)
-    #     brand_instant = BrandsInstant.create(:brand_id => brand.id, :title => 'An instant coupon for you!')
-    #     phone = Factory.next(:phone)
-    #     subscriber = Factory(:subscriber, :device_id => phone)
-    #     post 'sms', @valid.merge(:Body => brand.title, :From => subscriber.device_id)
+    #     brand_instant = Factory(:brands_instant, :title => 'An instant coupon for you!')
+    #     brand = brand_instant.brand
+    #     device_id = Factory.next(:phone)
+    #     post 'sms', @valid.merge(:Body => brand.title, :From => device_id)
     #     response.should have_selector('response>sms', :content => "Welcome to Cuphon! Reply with STOP to stop.")
     #     response.should have_selector('response>sms', :content => "An instant coupon for you!")
     #     response.should_not have_selector('response>sms', :content => "been subscribed to #{brand.title}")        
diff --git a/spec/factories.rb b/spec/factories.rb
index b4b6785..a064d2a 100644
--- a/spec/factories.rb
+++ b/spec/factories.rb
@@ -30,3 +30,8 @@ Factory.define :subscriber do |s|
   s.sequence(:device_id) { Factory.next(:phone) }
 end
 
+Factory.define :brands_instant do |instant|
+  instant.association :brand, :factory => :brand
+  instant.title "asdfasfadfs"
+end
+
diff --git a/spec/models/brand_spec.rb b/spec/models/brand_spec.rb
index 7b6607b..1c4c8e0 100644
--- a/spec/models/brand_spec.rb
+++ b/spec/models/brand_spec.rb
@@ -50,4 +50,10 @@ describe Brand do
     end
         
   end
+  
+  describe "brands_instant relationship" do
+    instant = Factory(:brands_instant)
+    brand = instant.brand
+    brand.brands_instants.should include(instant)
+  end
 end
diff --git a/spec/models/brands_instant_spec.rb b/spec/models/brands_instant_spec.rb
index cc26260..bc27c32 100644
--- a/spec/models/brands_instant_spec.rb
+++ b/spec/models/brands_instant_spec.rb
@@ -4,4 +4,15 @@ describe BrandsInstant do
   it "should be able to create with the correct table" do
     BrandsInstant.create().should_not be_nil
   end
+  
+  it "should have a brand method that returns it's brand" do
+    brand = Factory(:brand)
+    instant = BrandsInstant.create(:brand_id => brand.id)
+    instant.brand.should == brand    
+  end
+  
+  it "factory should give it a brand" do
+    instant = Factory(:brands_instant)
+    instant.brand.id.should == instant.brand_id
+  end
 end
